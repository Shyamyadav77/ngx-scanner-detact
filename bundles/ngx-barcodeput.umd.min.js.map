{"version":3,"sources":["../../../projects/ngx-barcodeput/src/lib/directive/ngx-barcodeput.directive.ts","../../../projects/ngx-barcodeput/src/lib/ngx-barcodeput.module.ts"],"names":["NgxBarCodePutDirective","elementRef","this","debounce","skipStart","onDelete","EventEmitter","onDetected","destroy$","Subject","prototype","ngAfterViewInit","_this","pressed","from","pipe","mergeMap","event","fromEvent","nativeElement","map","type","which","timeStamp","Object","assign","duration","filter","keyCode","code","emit","value","target","length","debounceTime","distinctUntilChanged","takeUntil","subscribe","time","ngOnDestroy","next","complete","Directive","args","selector","ElementRef","Input","Output","NgModule","declarations","exports"],"mappings":"8aA+CE,SAAAA,EAAoBC,GAAAC,KAAAD,WAAAA,EAtBJC,KAAAC,SAAmB,EAKnBD,KAAAE,UAAoB,EAKnBF,KAAAG,SAAkC,IAAIC,EAAAA,aAKtCJ,KAAAK,WAAoC,IAAID,EAAAA,aAKjDJ,KAAAM,SAAW,IAAIC,EAAAA,eAIhBT,EAAAU,UAAAC,gBAAA,WAAA,IAAAC,EAAAV,KAWCW,EAAU,GAMhBC,EAAAA,KAXe,CAAC,UAAW,UAYxBC,KAKCC,EAAAA,UAAS,SAACC,GAAU,OAAAC,EAAAA,UAAUN,EAAKX,WAAWkB,cAAeF,MAK7DG,EAAAA,KAAI,SAACH,GACH,OAAQA,EAAMI,MACZ,IAAK,UAMHR,EAAQI,EAAMK,OAASL,EAAMM,UAC7B,MACF,IAAK,QAKHC,OAAOC,OAAOR,EAAO,CAACS,UAAWT,EAAMM,UAAYV,EAAQI,EAAMK,QAAU,MAO/E,OAAOL,KAETU,EAAAA,QAAO,SAACV,GAWN,OAVsB,IAAlBA,EAAMW,SAAgC,cAAfX,EAAMY,MAAwC,IAAhBZ,EAAMK,OAI7DV,EAAKP,SAASyB,KAAK,CAACb,MAAKA,EAAEc,MAAQd,EAAMe,OAA4BD,MAAOV,KAAM,WAM5EJ,EAAMe,OAA4BD,MAAME,OAASrB,EAAKR,aAMhE8B,EAAAA,aAAahC,KAAKC,UAMlBgC,EAAAA,wBAMDpB,KAAKqB,EAAAA,UAAUlC,KAAKM,WAKpB6B,WAAU,SAACpB,GACNA,EAAMS,SAAW,IAKnBd,EAAKL,WAAWuB,KAAK,CAACb,MAAKA,EAAEc,MAAOd,EAAMe,OAAOD,MAAOO,KAAMrB,EAAMS,SAAUL,KAAM,aAC3EJ,EAAMS,UAAY,KAK3Bd,EAAKL,WAAWuB,KAAK,CAACb,MAAKA,EAAEc,MAAOd,EAAMe,OAAOD,MAAOO,KAAMrB,EAAMS,SAAUL,KAAM,gBAQrFrB,EAAAU,UAAA6B,YAAA,WACLrC,KAAKM,SAASgC,MAAK,GACnBtC,KAAKM,SAASiC,qCA5IjBC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,+DAhBsBC,EAAAA,gDAuB/BC,EAAAA,yBAKAA,EAAAA,wBAKAC,EAAAA,2BAKAA,EAAAA,gBCjCH,iCAJCC,EAAAA,SAAQL,KAAA,CAAC,CACRM,aAAc,CAACjD,GACfkD,QAAS,CAAClD","sourcesContent":["import {from, fromEvent, Subject} from 'rxjs';\nimport {debounceTime, distinctUntilChanged, filter, map, mergeMap, takeUntil} from 'rxjs/operators';\nimport {AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, Output} from '@angular/core';\n\nexport interface IDetect {\n  type?: string;\n  time?: number;\n  event?: KeyboardEvent;\n  value?: string | number;\n}\n\nexport interface IDelete {\n  type?: string;\n  event?: KeyboardEvent;\n  value?: string | number;\n}\n\n@Directive({\n  selector: '[ngxBarCodePut]',\n})\nexport class NgxBarCodePutDirective implements AfterViewInit, OnDestroy {\n\n  /**\n   * Input delay\n   */\n  @Input() public debounce: number = 0;\n\n  /**\n   * After how many characters start search\n   */\n  @Input() public skipStart: number = 0;\n\n  /**\n   * Data cleansing event\n   */\n  @Output() public onDelete: EventEmitter<IDelete> = new EventEmitter();\n\n  /**\n   * Event after data entry\n   */\n  @Output() public onDetected: EventEmitter<IDetect> = new EventEmitter();\n\n  /**\n   * Use for unsubscribe\n   */\n  private destroy$ = new Subject();\n\n  constructor(private elementRef: ElementRef) {}\n\n  public ngAfterViewInit() {\n\n    /**\n     * Often the code scanner is connected to the computer.\n     * It emulates a press key, so we use keyboard events to press and release keys.\n     */\n    const events = ['keydown', 'keyup'];\n\n    /**\n     * Empty object for delay logic\n     */\n    const pressed = {};\n\n    /**\n     * Look at the\n     * {@Link http://reactivex.io/documentation/operators/from.html}\n     */\n    from(events)\n      .pipe(\n        /**\n         * Look at the\n         * {@Link https://rxjs-dev.firebaseapp.com/api/operators/mergeMap}\n         */\n        mergeMap((event) => fromEvent(this.elementRef.nativeElement, event)),\n\n        /**\n         * Prepare input data\n         */\n        map((event: KeyboardEvent) => {\n          switch (event.type) {\n            case 'keydown':\n\n              /**\n               * Since \"which\" is deprecated, we use it for a temporary variable\n               * and set the processing time keydown.\n               */\n              pressed[event.which] = event.timeStamp;\n              break;\n            case 'keyup':\n\n              /**\n               * In the delay set the difference between keydown and keyup events.\n               */\n              Object.assign(event, {duration: (event.timeStamp - pressed[event.which]) / 1000});\n              break;\n          }\n\n          /**\n           * @return {event: KeyboardEvent}\n           */\n          return event;\n        }),\n        filter((event: KeyboardEvent) => {\n          if (event.keyCode === 8 || event.code === 'Backspace' || event.which === 8) {\n            /**\n             * Used to clear data.\n             */\n            this.onDelete.emit({event, value: (event.target as HTMLInputElement).value, type: 'delete'});\n          }\n\n          /**\n           * Return data after typed in two characters.\n           */\n          return (event.target as HTMLInputElement).value.length > this.skipStart;\n        }),\n\n        /**\n         * Data entry delay is used to limit requests.\n         */\n        debounceTime(this.debounce),\n\n        /**\n         * Look at the\n         * {@Link http://reactivex.io/documentation/operators/distinct.html}\n         */\n        distinctUntilChanged(),\n      )\n\n      /**\n       * Use for unsubscribe\n       */\n      .pipe(takeUntil(this.destroy$))\n\n      /**\n       * Subscribe to the input data and determine the delay time for our purposes.\n       */\n      .subscribe((event: any) => {\n        if (event.duration > 0.02) {\n\n          /**\n           * Keyboard input.\n           */\n          this.onDetected.emit({event, value: event.target.value, time: event.duration, type: 'keyboard'});\n        } else if (event.duration <= 0.02) {\n\n          /**\n           * Input from the scanner.\n           */\n          this.onDetected.emit({event, value: event.target.value, time: event.duration, type: 'scanner'});\n        }\n      });\n  }\n\n  /**\n   * Use for unsubscribe\n   */\n  public ngOnDestroy() {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {NgxBarCodePutDirective} from './directive/ngx-barcodeput.directive';\n\n@NgModule({\n  declarations: [NgxBarCodePutDirective],\n  exports: [NgxBarCodePutDirective],\n})\nexport class NgxBarCodePutModule {}\n"]}