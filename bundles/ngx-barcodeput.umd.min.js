!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("rxjs"),require("rxjs/operators"),require("@angular/core")):"function"==typeof define&&define.amd?define("ngx-barcodeput",["exports","rxjs","rxjs/operators","@angular/core"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["ngx-barcodeput"]={},e.rxjs,e.rxjs.operators,e.ng.core)}(this,(function(e,t,r,n){"use strict";var o=function(){function e(e){this.elementRef=e,this.debounce=0,this.skipStart=0,this.onDelete=new n.EventEmitter,this.onDetected=new n.EventEmitter,this.destroy$=new t.Subject}return e.prototype.ngAfterViewInit=function(){var e=this,n={};t.from(["keydown","keyup"]).pipe(r.mergeMap((function(r){return t.fromEvent(e.elementRef.nativeElement,r)})),r.map((function(e){switch(e.type){case"keydown":n[e.which]=e.timeStamp;break;case"keyup":Object.assign(e,{duration:(e.timeStamp-n[e.which])/1e3})}return e})),r.filter((function(t){return 8!==t.keyCode&&"Backspace"!==t.code&&8!==t.which||e.onDelete.emit({event:t,value:t.target.value,type:"delete"}),t.target.value.length>e.skipStart})),r.debounceTime(this.debounce),r.distinctUntilChanged()).pipe(r.takeUntil(this.destroy$)).subscribe((function(t){t.duration>.02?e.onDetected.emit({event:t,value:t.target.value,time:t.duration,type:"keyboard"}):t.duration<=.02&&e.onDetected.emit({event:t,value:t.target.value,time:t.duration,type:"scanner"})}))},e.prototype.ngOnDestroy=function(){this.destroy$.next(!0),this.destroy$.complete()},e}();o.decorators=[{type:n.Directive,args:[{selector:"[ngxBarCodePut]"}]}],o.ctorParameters=function(){return[{type:n.ElementRef}]},o.propDecorators={debounce:[{type:n.Input}],skipStart:[{type:n.Input}],onDelete:[{type:n.Output}],onDetected:[{type:n.Output}]};var i=function(){};i.decorators=[{type:n.NgModule,args:[{declarations:[o],exports:[o]}]}],e.NgxBarCodePutDirective=o,e.NgxBarCodePutModule=i,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=ngx-barcodeput.umd.min.js.map