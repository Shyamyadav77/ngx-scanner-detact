{"version":3,"file":"ngx-barcodeput.js","sources":["../../../projects/ngx-barcodeput/src/lib/directive/ngx-barcodeput.directive.ts","../../../projects/ngx-barcodeput/src/lib/ngx-barcodeput.module.ts","../../../projects/ngx-barcodeput/src/public-api.ts","../../../projects/ngx-barcodeput/src/ngx-barcodeput.ts"],"sourcesContent":["import {from, fromEvent, Subject} from 'rxjs';\nimport {debounceTime, distinctUntilChanged, filter, map, mergeMap, takeUntil} from 'rxjs/operators';\nimport {AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, Output} from '@angular/core';\n\nexport interface IDetect {\n  type?: string;\n  time?: number;\n  event?: KeyboardEvent;\n  value?: string | number;\n}\n\nexport interface IDelete {\n  type?: string;\n  event?: KeyboardEvent;\n  value?: string | number;\n}\n\n@Directive({\n  selector: '[ngxBarCodePut]',\n})\nexport class NgxBarCodePutDirective implements AfterViewInit, OnDestroy {\n\n  /**\n   * Input delay\n   */\n  @Input() public debounce: number = 0;\n\n  /**\n   * After how many characters start search\n   */\n  @Input() public skipStart: number = 0;\n\n  /**\n   * Data cleansing event\n   */\n  @Output() public onDelete: EventEmitter<IDelete> = new EventEmitter();\n\n  /**\n   * Event after data entry\n   */\n  @Output() public onDetected: EventEmitter<IDetect> = new EventEmitter();\n\n  /**\n   * Use for unsubscribe\n   */\n  private destroy$ = new Subject();\n\n  constructor(private elementRef: ElementRef) {}\n\n  public ngAfterViewInit() {\n\n    /**\n     * Often the code scanner is connected to the computer.\n     * It emulates a press key, so we use keyboard events to press and release keys.\n     */\n    const events = ['keydown', 'keyup'];\n\n    /**\n     * Empty object for delay logic\n     */\n    const pressed = {};\n\n    /**\n     * Look at the\n     * {@Link http://reactivex.io/documentation/operators/from.html}\n     */\n    from(events)\n      .pipe(\n        /**\n         * Look at the\n         * {@Link https://rxjs-dev.firebaseapp.com/api/operators/mergeMap}\n         */\n        mergeMap((event) => fromEvent(this.elementRef.nativeElement, event)),\n\n        /**\n         * Prepare input data\n         */\n        map((event: KeyboardEvent) => {\n          switch (event.type) {\n            case 'keydown':\n\n              /**\n               * Since \"which\" is deprecated, we use it for a temporary variable\n               * and set the processing time keydown.\n               */\n              pressed[event.which] = event.timeStamp;\n              break;\n            case 'keyup':\n\n              /**\n               * In the delay set the difference between keydown and keyup events.\n               */\n              Object.assign(event, {duration: (event.timeStamp - pressed[event.which]) / 1000});\n              break;\n          }\n\n          /**\n           * @return {event: KeyboardEvent}\n           */\n          return event;\n        }),\n        filter((event: KeyboardEvent) => {\n          if (event.keyCode === 8 || event.code === 'Backspace' || event.which === 8) {\n            /**\n             * Used to clear data.\n             */\n            this.onDelete.emit({event, value: (event.target as HTMLInputElement).value, type: 'delete'});\n          }\n\n          /**\n           * Return data after typed in two characters.\n           */\n          return (event.target as HTMLInputElement).value.length > this.skipStart;\n        }),\n\n        /**\n         * Data entry delay is used to limit requests.\n         */\n        debounceTime(this.debounce),\n\n        /**\n         * Look at the\n         * {@Link http://reactivex.io/documentation/operators/distinct.html}\n         */\n        distinctUntilChanged(),\n      )\n\n      /**\n       * Use for unsubscribe\n       */\n      .pipe(takeUntil(this.destroy$))\n\n      /**\n       * Subscribe to the input data and determine the delay time for our purposes.\n       */\n      .subscribe((event: any) => {\n        if (event.duration > 0.02) {\n\n          /**\n           * Keyboard input.\n           */\n          this.onDetected.emit({event, value: event.target.value, time: event.duration, type: 'keyboard'});\n        } else if (event.duration <= 0.02) {\n\n          /**\n           * Input from the scanner.\n           */\n          this.onDetected.emit({event, value: event.target.value, time: event.duration, type: 'scanner'});\n        }\n      });\n  }\n\n  /**\n   * Use for unsubscribe\n   */\n  public ngOnDestroy() {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {NgxBarCodePutDirective} from './directive/ngx-barcodeput.directive';\n\n@NgModule({\n  declarations: [NgxBarCodePutDirective],\n  exports: [NgxBarCodePutDirective],\n})\nexport class NgxBarCodePutModule {}\n","/*\n * Public API Surface of ngx-barcodeput\n */\n\nexport * from './lib/directive/ngx-barcodeput.directive';\nexport * from './lib/ngx-barcodeput.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}